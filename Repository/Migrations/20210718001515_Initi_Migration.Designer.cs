// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(MyAppContext))]
    [Migration("20210718001515_Initi_Migration")]
    partial class Initi_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Entities.CategoriaProduto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("active")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("id");

                    b.ToTable("CategoriaProduto");
                });

            modelBuilder.Entity("Domain.Entities.Cidades", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("active")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<int>("codigo_ibge")
                        .HasColumnType("integer");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("uf")
                        .IsRequired()
                        .HasColumnType("char(2)");

                    b.HasKey("id");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("Domain.Entities.Clientes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("active")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("cpfcnpj")
                        .IsRequired()
                        .HasColumnType("char(20)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("id_endereco")
                        .HasColumnType("integer");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("char(150)");

                    b.HasKey("id");

                    b.HasIndex("id_endereco")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Domain.Entities.Combos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("active")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("id_imagem")
                        .HasColumnType("integer");

                    b.Property<int>("id_produto")
                        .HasColumnType("integer");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("char(250)");

                    b.Property<decimal>("preco")
                        .HasColumnType("numeric(18,5)");

                    b.HasKey("id");

                    b.HasIndex("id_imagem");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("Domain.Entities.Enderecos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("bairro")
                        .IsRequired()
                        .HasColumnType("char(250)");

                    b.Property<string>("cep")
                        .HasColumnType("char(20)");

                    b.Property<string>("complemento")
                        .HasColumnType("char(250)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("id_cidade")
                        .HasColumnType("integer");

                    b.Property<string>("logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.Property<string>("numero")
                        .IsRequired()
                        .HasColumnType("char(50)");

                    b.Property<byte>("tipo")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.HasIndex("id_cidade");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Domain.Entities.Imagens", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("caminhoarquivo")
                        .IsRequired()
                        .HasColumnType("char(250)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("char(250)");

                    b.Property<string>("principal")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.HasKey("id");

                    b.ToTable("Imagens");
                });

            modelBuilder.Entity("Domain.Entities.ImagensProduto", b =>
                {
                    b.Property<int>("id_imagem")
                        .HasColumnType("integer");

                    b.Property<int>("id_produto")
                        .HasColumnType("integer");

                    b.HasKey("id_imagem", "id_produto");

                    b.HasIndex("id_produto");

                    b.ToTable("ImagensProdutos");
                });

            modelBuilder.Entity("Domain.Entities.Pedidos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("dt_entrega")
                        .HasColumnType("interval");

                    b.Property<int>("id_cliente")
                        .HasColumnType("integer");

                    b.Property<string>("numero")
                        .IsRequired()
                        .HasColumnType("char(250)");

                    b.Property<decimal>("valor")
                        .HasColumnType("numeric(18,5)");

                    b.HasKey("id");

                    b.HasIndex("id_cliente");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Domain.Entities.Produtos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("active")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasColumnType("char(50)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("char(250)");

                    b.Property<string>("ean")
                        .IsRequired()
                        .HasColumnType("char(30)");

                    b.Property<int>("id_categoria")
                        .HasColumnType("integer");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("char(150)");

                    b.Property<decimal>("preco")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.HasIndex("id_categoria");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Domain.Entities.ProdutosCombo", b =>
                {
                    b.Property<int>("id_produto")
                        .HasColumnType("integer");

                    b.Property<int>("id_combo")
                        .HasColumnType("integer");

                    b.HasKey("id_produto", "id_combo");

                    b.HasIndex("id_combo");

                    b.ToTable("ProdutosCombo");
                });

            modelBuilder.Entity("Domain.Entities.ProdutosPedidos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("id_pedido")
                        .HasColumnType("integer");

                    b.Property<int>("id_produto")
                        .HasColumnType("integer");

                    b.Property<decimal>("preco")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("quantidade")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id_pedido");

                    b.HasIndex("id_produto");

                    b.ToTable("ProdutosPedidos");
                });

            modelBuilder.Entity("Domain.Entities.PromocaoProduto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("active")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("id_imagem")
                        .HasColumnType("integer");

                    b.Property<int>("id_produto")
                        .HasColumnType("integer");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("char(150)");

                    b.Property<decimal>("preco")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("id");

                    b.HasIndex("id_imagem");

                    b.HasIndex("id_produto");

                    b.ToTable("PromocaoProduto");
                });

            modelBuilder.Entity("Domain.Entities.Clientes", b =>
                {
                    b.HasOne("Domain.Entities.Enderecos", "Endereco")
                        .WithOne("Clientes")
                        .HasForeignKey("Domain.Entities.Clientes", "id_endereco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Domain.Entities.Combos", b =>
                {
                    b.HasOne("Domain.Entities.Imagens", "Imagens")
                        .WithMany()
                        .HasForeignKey("id_imagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imagens");
                });

            modelBuilder.Entity("Domain.Entities.Enderecos", b =>
                {
                    b.HasOne("Domain.Entities.Cidades", "Cidade")
                        .WithMany()
                        .HasForeignKey("id_cidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Domain.Entities.ImagensProduto", b =>
                {
                    b.HasOne("Domain.Entities.Imagens", "Imagens")
                        .WithMany()
                        .HasForeignKey("id_imagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Produtos", "Produtos")
                        .WithMany()
                        .HasForeignKey("id_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imagens");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Domain.Entities.Pedidos", b =>
                {
                    b.HasOne("Domain.Entities.Clientes", "clientes")
                        .WithMany("pedidos")
                        .HasForeignKey("id_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clientes");
                });

            modelBuilder.Entity("Domain.Entities.Produtos", b =>
                {
                    b.HasOne("Domain.Entities.CategoriaProduto", "CategoriaProduto")
                        .WithMany("Produtos")
                        .HasForeignKey("id_categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaProduto");
                });

            modelBuilder.Entity("Domain.Entities.ProdutosCombo", b =>
                {
                    b.HasOne("Domain.Entities.Combos", "Combos")
                        .WithMany()
                        .HasForeignKey("id_combo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Produtos", "Produtos")
                        .WithMany()
                        .HasForeignKey("id_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combos");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Domain.Entities.ProdutosPedidos", b =>
                {
                    b.HasOne("Domain.Entities.Pedidos", "Pedidos")
                        .WithMany("ProdutosPedidos")
                        .HasForeignKey("id_pedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Produtos", "Produtos")
                        .WithMany()
                        .HasForeignKey("id_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedidos");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Domain.Entities.PromocaoProduto", b =>
                {
                    b.HasOne("Domain.Entities.Imagens", "Imagens")
                        .WithMany()
                        .HasForeignKey("id_imagem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Produtos", "Produtos")
                        .WithMany("PromocaoProdutos")
                        .HasForeignKey("id_produto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Imagens");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Domain.Entities.CategoriaProduto", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Domain.Entities.Clientes", b =>
                {
                    b.Navigation("pedidos");
                });

            modelBuilder.Entity("Domain.Entities.Enderecos", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("Domain.Entities.Pedidos", b =>
                {
                    b.Navigation("ProdutosPedidos");
                });

            modelBuilder.Entity("Domain.Entities.Produtos", b =>
                {
                    b.Navigation("PromocaoProdutos");
                });
#pragma warning restore 612, 618
        }
    }
}
